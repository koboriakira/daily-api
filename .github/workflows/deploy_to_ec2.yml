# @format

name: Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
  LINE_TALK_ID: ${{ secrets.LINE_TALK_ID }}
  GAS_DEPLOY_ID: ${{ secrets.GAS_DEPLOY_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # SecretsManagerからAWSの認証情報を取得する
      - name: Configure AWS credentials with AssumeRole
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-1
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GItHubActionsRole
          role-duration-seconds: 900 # Roleの有効期間を15分に設定。必要に応じて変更する。

      - name: Get Secrets from AWS Secrets Manager
        id: get_secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: |
            common
          parse-json-secrets: true

      # 次の環境変数が格納される
      # COMMON_COMMON_KNOWN_HOSTS_FOR_AWS_BASTION_FOR_AWS_BASTION
      # COMMON_AWS_BASTION_IP
      # COMMON_ID_RSA
      # COMMON_SPOTIFY_CLIENT_ID
      # COMMON_SPOTIFY_CLIENT_SECRET
      # COMMON_NOTION_API_TOKEN
      # COMMON_LINE_CHANNEL_ACCESS_TOKEN
      # COMMON_SLACK_BOT_TOKEN
      # COMMON_SLACK_USER_TOKEN

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ env.COMMON_ID_RSA }}
          name: id_rsa
          known_hosts: ${{ env.COMMON_KNOWN_HOSTS_FOR_AWS_BASTION }}

      - name: Make directories
        run: |
          ssh ec2-user@${{ env.COMMON_AWS_BASTION_IP }} mkdir -p /home/ec2-user/daily-api/app
          ssh ec2-user@${{ env.COMMON_AWS_BASTION_IP }} mkdir -p /home/ec2-user/daily-api/scripts
          ssh ec2-user@${{ env.COMMON_AWS_BASTION_IP }} mkdir -p /home/ec2-user/daily-api/docker/api

      # TODO: DockerイメージをビルドしてDocker Hubにプッシュする
      # その後、Dockerイメージをpullしてrunするようにしてもいいかな
      - name: rsync
        run: |
          rsync -a ./app/ ec2-user@${{ env.COMMON_AWS_BASTION_IP }}:/home/ec2-user/daily-api/app/
          rsync -a ./requirements.txt ec2-user@${{ env.COMMON_AWS_BASTION_IP }}:/home/ec2-user/daily-api/requirements.txt
          rsync -a ./scripts/ ec2-user@${{ env.COMMON_AWS_BASTION_IP }}:/home/ec2-user/daily-api/scripts/
          rsync -a ./docker/api/Dockerfile ec2-user@${{ env.COMMON_AWS_BASTION_IP }}:/home/ec2-user/daily-api/docker/api/Dockerfile
          chmod +x ./.github/workflows/scripts/start_docker_container.sh
          rsync -a ./.github/workflows/scripts/start_docker_container.sh ec2-user@${{ env.COMMON_AWS_BASTION_IP }}:/home/ec2-user/daily-api/start_docker_container.sh

      - name: restart docker container
        run: |
          ssh ec2-user@${{ env.COMMON_AWS_BASTION_IP }} /home/ec2-user/daily-api/start_docker_container.sh \
          ${{ env.COMMON_SPOTIFY_CLIENT_ID }} \
          ${{ env.COMMON_SPOTIFY_CLIENT_SECRET }} \
          ${{ env.COMMON_NOTION_API_TOKEN }} \
          ${{ env.ACCESS_TOKEN }} \
          ${{ env.COMMON_LINE_CHANNEL_ACCESS_TOKEN }} \
          ${{ env.LINE_TALK_ID }} \
          ${{ env.GAS_DEPLOY_ID }} \
          ${{ env.COMMON_SLACK_USER_TOKEN }} \
          ${{ env.COMMON_SLACK_BOT_TOKEN }}

      - name: Post to a Slack channel
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: "C04Q3AV4TA5" # 通知チャンネル
          slack-message: "daily-apiのデプロイが完了しました。\nSpotifyを再有効化するため、アクセストークンの取得を手動で行ってください。\n<http://${{ env.COMMON_AWS_BASTION_IP }}/spotify/access_token>"
        env:
          SLACK_BOT_TOKEN: ${{ env.SLACK_BOT_TOKEN }}
